"use client";

import { useState } from 'react';
import { Connection, LAMPORTS_PER_SOL, Keypair } from '@solana/web3.js';
import bs58 from 'bs58'; // Not directly used in the provided createToken function, but if it were, it'd stay here.

// Token creation form component
export default function Tokenz({ publicKey, connected, signTransaction, onTokenCreationSuccess }) {
  const [formData, setFormData] = useState({
    name: '',
    symbol: '',
    description: '',
    twitter: '',
    telegram: '',
    website: '',
    devBuyAmount: '0.01', // SOL amount for dev buy
    image: null // This will store the File object
  });

  // State to manage drag-and-drop visual feedback
  const [isDraggingOver, setIsDraggingOver] = useState(false);

  // States moved from Home component
  const [isCreatingToken, setIsCreatingToken] = useState(false);
  const [createdTokens, setCreatedTokens] = useState([]);
  const [creationStatus, setCreationStatus] = useState('');

  const connection = new Connection('https://mainnet.helius-rpc.com/?api-key=530b3b75-39b9-4fc8-a12c-4fb4250eab6d');

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleFileSelection = (file) => {
    if (file && file.type.startsWith('image/')) {
      setFormData(prev => ({
        ...prev,
        image: file
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        image: null
      }));
    }
  };

  const handleImageChange = (e) => {
    handleFileSelection(e.target.files[0]);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDraggingOver(true);
  };

  const handleDragLeave = (e) => {
      e.preventDefault();
      e.stopPropagation();
      setIsDraggingOver(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDraggingOver(false);

    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      handleFileSelection(e.dataTransfer.files[0]);
      e.dataTransfer.clearData();
    }
  };

  // Moved createToken function to Tokenz component
  const createToken = async (tokenData) => {
    if (!connected || !publicKey || !signTransaction) {
      console.error('Please connect your wallet first');
      setCreationStatus('Error: Please connect your wallet first.');
      return;
    }

    setIsCreatingToken(true);
    setCreationStatus('Preparing token creation...');

    try {
      const mintKeypair = Keypair.generate();

      const formDataForIpfs = new FormData();
      if (tokenData.image) {
        formDataForIpfs.append('file', tokenData.image);
      }
      formDataForIpfs.append('name', tokenData.name);
      formDataForIpfs.append('symbol', tokenData.symbol);
      formDataForIpfs.append('description', tokenData.description);
      formDataForIpfs.append('twitter', tokenData.twitter || '');
      formDataForIpfs.append('telegram', tokenData.telegram || '');
      formDataForIpfs.append('website', tokenData.website || '');
      formDataForIpfs.append('showName', 'true');

      setCreationStatus('Uploading metadata to IPFS...');

      const metadataResponse = await fetch('https://pump.fun/api/ipfs', {
        method: 'POST',
        body: formDataForIpfs,
      });

      if (!metadataResponse.ok) {
        throw new Error('Failed to upload metadata to IPFS');
      }

      const metadataResponseJSON = await metadataResponse.json();

      setCreationStatus('Creating token transaction...');

      const createResponse = await fetch('https://pumpportal.fun/api/trade-local', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          publicKey: publicKey.toString(),
          action: 'create',
          tokenMetadata: {
            name: tokenData.name,
            symbol: tokenData.symbol,
            uri: metadataResponseJSON.metadataUri
          },
          mint: mintKeypair.publicKey.toString(),
          denominatedInSol: 'true',
          amount: parseFloat(tokenData.devBuyAmount) || 0.1,
          slippage: 10,
          priorityFee: 0.0005,
          pool: 'pump'
        }),
      });

      if (!createResponse.ok) {
        const errorText = await createResponse.text();
        throw new Error(`Failed to create token transaction: ${errorText}`);
      }

      setCreationStatus('Please sign the transaction...');

      const { VersionedTransaction } = await import('@solana/web3.js');
      const transactionData = await createResponse.arrayBuffer();
      const transaction = VersionedTransaction.deserialize(new Uint8Array(transactionData));

      transaction.sign([mintKeypair]);
      const signedTransaction = await signTransaction(transaction);

      setCreationStatus('Submitting transaction...');

      const signature = await connection.sendTransaction(signedTransaction);

      setCreationStatus('Confirming transaction...');

      await connection.confirmTransaction(signature, 'confirmed');

      const newToken = {
        mint: mintKeypair.publicKey.toString(),
        name: tokenData.name,
        symbol: tokenData.symbol,
        signature: signature,
        timestamp: new Date().toISOString()
      };

      setCreatedTokens(prev => [newToken, ...prev]);
      setCreationStatus(`Token created successfully! Mint: ${mintKeypair.publicKey.toString()}`);

      // Call the prop function to notify the parent (Home) about successful creation
      // This allows Home to re-fetch the balance.
      if (onTokenCreationSuccess) {
        onTokenCreationSuccess();
      }

    } catch (error) {
      console.error('Error creating token:', error);
      setCreationStatus(`Error: ${error.message}`);
    } finally {
      setIsCreatingToken(false);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!formData.name || !formData.symbol || !formData.description) {
      console.error('Please fill in required fields (Name, Symbol, Description)');
      setCreationStatus('Error: Please fill in required fields (Name, Symbol, Description).');
      return;
    }
    createToken(formData); // Call the internal createToken function
  };

  return (
    <>
      <div className="bg-white rounded-xl p-6 border border-gray-200 mb-6">
        <h3 className="text-xl font-bold text-black mb-4">Create Token</h3>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-2">
                Name*
              </label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                placeholder="e.x. Anon"
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black text-black"
                disabled={isCreatingToken} // Use internal state
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-600 mb-2">
                Ticker*
              </label>
              <input
                type="text"
                name="symbol"
                value={formData.symbol}
                onChange={handleInputChange}
                placeholder="e.x. ANON"
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black text-black"
                disabled={isCreatingToken}
                required
                maxLength={10}
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-600 mb-2">
              Description*
            </label>
            <textarea
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              placeholder="Describe your token..."
              rows={3}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black text-black"
              disabled={isCreatingToken}
              required
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-2">
                X (optional)
              </label>
              <input
                type="url"
                name="twitter"
                value={formData.twitter}
                onChange={handleInputChange}
                placeholder="https://x.com/..."
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black text-black"
                disabled={isCreatingToken}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-600 mb-2">
                Telegram (optional)
              </label>
              <input
                type="url"
                name="telegram"
                value={formData.telegram}
                onChange={handleInputChange}
                placeholder="https://t.me/..."
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black text-black"
                disabled={isCreatingToken}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-600 mb-2">
                Website (optional)
              </label>
              <input
                type="url"
                name="website"
                value={formData.website}
                onChange={handleInputChange}
                placeholder="https://..."
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black text-black"
                disabled={isCreatingToken}
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label htmlFor="token-image-upload" className="block text-sm font-medium text-gray-600 mb-2">
                Token Image (optional)
              </label>
              <div
                className={`flex items-center space-x-2 w-full p-1 border-1 rounded-lg transition-colors duration-200 ${
                  isDraggingOver ? 'border-black bg-gray-50 border-dashed' : 'border-gray-300 border-solid'
                }`}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
              >
                <input
                  id="token-image-upload"
                  type="file"
                  accept="image/*"
                  onChange={handleImageChange}
                  className="hidden"
                  disabled={isCreatingToken}
                />
                <label
                  htmlFor="token-image-upload"
                  className="cursor-pointer bg-black text-white py-2 px-3 rounded-lg hover:bg-gray-800 transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-black focus:ring-opacity-50"
                >
                  Choose File
                </label>
                <span className="text-gray-700 text-sm flex-1 truncate">
                  {formData.image ? `Selected: ${formData.image.name}` : 'No file chosen'}
                </span>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-600 mb-2">
                Dev Buy Amount (SOL)
              </label>
              <input
                type="number"
                name="devBuyAmount"
                value={formData.devBuyAmount}
                onChange={handleInputChange}
                placeholder="0.1"
                step="0.01"
                min="0"
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black text-black"
                disabled={isCreatingToken}
              />
            </div>
          </div>

          <button
            type="submit"
            disabled={isCreatingToken}
            className="w-full bg-black text-white py-3 px-6 rounded-lg font-semibold hover:bg-gray-800 transition-colors duration-300 disabled:bg-gray-400 disabled:cursor-not-allowed"
          >
            {isCreatingToken ? 'Creating Token...' : 'Create Token'}
          </button>
        </form>
      </div>

      {/* Creation Status */}
      {creationStatus && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <p className="text-blue-800">{creationStatus}</p>
        </div>
      )}

      {/* Created Tokens List */}
      {createdTokens.length > 0 && (
        <div className="bg-white rounded-xl p-6 border border-gray-200 mb-6">
          <h3 className="text-xl font-bold text-black mb-4">Created Tokens</h3>
          <div className="space-y-3">
            {createdTokens.map((token) => (
              <div key={token.mint} className="bg-gray-50 rounded-lg p-4">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-2 text-sm">
                  <div>
                    <span className="font-medium text-gray-600">Name:</span> {token.name} ({token.symbol})
                  </div>
                  <div>
                    <span className="font-medium text-gray-600">Mint:</span>
                    <span className="font-mono ml-2">{token.mint.slice(0, 8)}...{token.mint.slice(-8)}</span>
                  </div>
                  <div>
                    <a
                      href={`https://solscan.io/tx/${token.signature}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:text-blue-800 underline"
                    >
                      View Transaction
                    </a>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </>
  );
}